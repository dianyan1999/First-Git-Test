
******************************************************************************************
*                                   GIT 基础命令                                         *
******************************************************************************************
git init                -->创建git工作区
git add fileName        -->添加文件
git commit -m description       -->将已添加的文件提交到仓库 description:描述
git reset --hard version        -->版本回退，version:HEAD^-回退一个版本，版本号
git log                 -->查看日志，可携带参数(--pretty=oneline:一行显示一个版本)
git reflog              -->记录你使用的每一次git命令
git status              -->查看当前状态
git checkout -- filename        -->撤销filename文件在工作区的修改
git rm filename             -->删除指定文件  注：执行完git rm 后必须得执行 git commit命令才能删除仓库中的文件

******************************************************************************************
*                                     关联github                                         *
******************************************************************************************
git remote add objName git@github.com:server-name/pro-name.git         -->关联GITHUB仓库
git push -u objName master   -->将本地仓库的内容推送到远程仓库
git remote -v               -->查看远程库信息
git remote rm objName       -->根据名字删除，实际上只解除了本地与远程库的绑定关系，并不是物理的删除了远程库，远程库本身并没有任何改变
git clone objUrl            -->从远程库克隆项目

******************************************************************************************
*                            从远程仓库更新代码并合并到本地                                *
******************************************************************************************
git fetch orging master:temp
git merge temp
git branch -d temp

******************************************************************************************
*                                       分支管理                                         *
******************************************************************************************
git checkout -b dev         -->创建一个名为【dev】的分支，并切换到分支【dev】,此命令相当于：
    git branch dev          -->创建一个名为【dev】的分支
    git checkout dev        -->切换到分支【dev】
git branch                  -->查看当前项目的所有分支
git merge dev               -->将名为【dev】的分支全并到当前分支
git branch -d dev           -->删除名为【dev】的分支

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>switch<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
git switch -c dev           -->创建一个名为【dev】的分支，并切换到分支【dev】
git switch dev              -->切换到分支【dev】

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>BUG分支<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
git stash                   -->把当前工作现在”储藏“起来，等以后恢复现场后继续工作
git stash list              -->查看”储藏“的工作现场
git stash apply             -->恢复工作现场，但不删除该工作现场
git stash drop              -->删除”储藏“的工作现场，配合[ git stash apply ]使用
git stash pop               -->恢复工作现场，并删除该”储藏“记录

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>feature分支<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
git branch -D vulcan        -->强行删除未合并的分支【vulcan】


******************************************************************************************
*                                       标签管理                                         *
******************************************************************************************
git tag <tagName>           -->用于创建一个标签，默认为HEAD,也可以指定一个commit id
    git tag -a <tagName> -m <remark>        -->创建标签并配上说明文字
git tag                     -->用于查看所有标签
git show <tagName>          -->用于查看指定标签
git tag -d <tagName>        -->删除本地标签(标签都是存储在本地的)
git push <objName> <tagName>    -->将本地标签推送到远程
git push <objName> :refs/tags/<tagName>     -->删除远程标签

******************************************************************************************
*                                     创建 SSH-KEY                                       *
******************************************************************************************
1、首页：查看本地是否有.ssh文件
找到 Git Bash 打开后 运行 cd ~/.ssh 查看是否有该文件
如果本地有ssh密钥的话会有id_rsa、id_rsa.pub、known_hosts等文件。
如果没有的话运行上步骤命令就会找不到文件的提示
2、也可以删除ssh
复制并运行 rm -rf ~/.ssh/* 把现有的ssh key都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。
3、运行 ssh-keygen -t rsa -b 4096 -C “你的邮箱” ，注意填写你的真实邮箱。
4、按回车三次
5、运行 cat ~/.ssh/id_rsa.pub ，得到一串东西，完整的复制这串东西
6、打开GitHub->点击头像->setting->SSH adn GPG keys->New SSh key
7、输入你的title、把刚才复制的那段粘贴到key中保存
8、运行 ssh -T git@github.com ，你可能会看到这样的提示。
9、输入yse
10、然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1步重来；
如果你看到 Hi ***! You’ve successfully authenticated, but GitHub does not provide shell access.
那就说明你成功了

